---
title: "SVM"
author: "KWONHYUNJIN"
date: "2018년 10월 1일"
output: html_document
---
#e1071: svm 을 위한 패키지
```{r setup, include=FALSE}
library(xlsx)
library(dplyr)
library(ggplot2)
library(caret)
library(e1071)
library(class)
library(gmodels)
library(kernlab)
```

```{r}
omitdata <- read.xlsx("dataset_omit.xlsx",1)
```

#데이터 불러오기
```{r}
data <- omitdata
str(data)
```


```{r}
table(is.na(data))
table(data$CaTypeO)
```


```{r}
data$CaTypeO <- factor(data$CaTypeO,levels = c(1,2,8),labels = c("DCIS","IC","NC"))
str(data)
```



#set.seed란 랜덤한 값을 시작하기 전에 사용하면 이후에도 같은 값으로 랜덤값을 갖는다.
#seed(123)은 동일한 랜덤값을 계속해서 받기위해
#nrow 주어진 데이터 프레임 또는 벡터의 행의 수 또는 길이를 반환하는 함수
#편향방지
#sample 함수는 데이터에서 무작위로 샘플을 추출해주는 함수
```{r}
set.seed(123)
bc_shuffle <- data[sample(nrow(data)), ]
head(bc_shuffle)

bc_s <- bc_shuffle[-1]
bc_s
```

#normalize라는 정규화함수를 사용자 정의 함수로 생성한다.
#class(label)에 해당하는 행 을 찾음 -> 정규화 시킬때 범주형 데이터를 제외하기 위해서 
```{r}
normalize <- function(x) {
  return ( (x-min(x)) / (max(x) - min(x))  )
}

ncol <- which(colnames(bc_s) == "CaTypeO")
ncol
```

```{r}
head(bc_s[-ncol])
```


#lapply(list or vector,function): 함수를 하나하나에 사용하려 할때
#(굉장히 자주 쓰이는 함수)
#as.data.frame: dataframe으로 변환하는 함수
#factor인 label을 제외하고 normalize한다.
```{r}
bc_n <- as.data.frame(lapply(bc_s[-ncol],normalize))
head(bc_n)
```

```{r}
bc_m <- cbind(bc_n,bc_s[ncol])
```


#Train 과 Test 를 9:1로 나눈다.
#bc_n은 shuffle 을 한 bc2 값에서 label 값을 빼고 정규화 시킨값 
```{r}
train_num<-round(0.9*nrow(bc_m),0)
bc_train<-bc_m[1:train_num,]
bc_test<-bc_m[(train_num+1):nrow(bc_m),]
```


#ksvm()함수는 가우시안 커널을 기본으로 하며 vanilladot 은 특별한 변환이 내적 계산 
```{r}
Class_classifier <-ksvm(CaTypeO~.,data=bc_train,kernel="vanilladot")
Class_classifier
```

```{r}
Class_predictions <- predict(Class_classifier,bc_test)
```

```{r}
bc_test_label <- bc_test$CaTypeO
```


```{r}
confusionMatrix(table(bc_test_label,Class_predictions))
```