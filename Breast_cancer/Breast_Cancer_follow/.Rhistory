ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
lda_model <- train(diagnosis~. ,
data = wbcd_train,
method = "lda",
preProcess = c("center","scale"),
trControl = ctrl)
ldaPredict <- predict(lda_model,newdata = wbcd_test)
confusionMatrix(ldaPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
ldaROC <- prediction(as.numeric(ldaPredict), as.numeric(answer))
prf <- performance(ldaROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(ldaROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
LDA_MODEL <- train(Class~. ,
data = wbco_train,
method = "lda",
preProcess = c("center","scale"),
trControl = ctrl)
LDA_MODEL
LDAPREDICT <- predict(LDA_MODEL,newdata = wbco_test)
confusionMatrix(LDAPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
LDAROC <- prediction(as.numeric(LDAPREDICT), as.numeric(ANSWER))
PRF <- performance(LDAROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(LDAROC,measure = "auc")
unlist(PERF.AUC@y.values)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm",
preProcess = c("center","scale"),
trControl = ctrl)
glmPredict <- predict(glm_model,newdata = wbcd_test)
confusionMatrix(glmPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
glmROC <- prediction(as.numeric(glmPredict), as.numeric(answer))
prf <- performance(glmROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(glmROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
GLM_MODEL <- train(Class~. ,
data = wbco_train,
method = "glm",
preProcess = c("center","scale"),
trControl = ctrl)
GLM_MODEL
GLMPREDICT <- predict(GLM_MODEL,newdata = wbco_test)
confusionMatrix(GLMPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
GLMROC <- prediction(as.numeric(GLMPREDICT), as.numeric(ANSWER))
PRF <- performance(GLMROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(GLMROC,measure = "auc")
unlist(PERF.AUC@y.values)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm",
)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm"
)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c(0,1))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
wbcd <- wdbc[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c(0,1))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm",
preProcess = c("center","scale"),
trControl = ctrl)
model <- glm(diagnosis ~ ., data = wbcd_train, family = binomial)
wbcd <- wdbc[-1]
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
wbcd_n <- wbcd
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
model <- glm(diagnosis ~ ., data = wbcd_train, family = binomial)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
grid = expand.grid(k = 5)
set.seed(1234)
knnFit <- train(diagnosis~. ,
data = wbcd_train,
method = "knn",
tuneGrid = grid)
knnFit
k_n <- max(knnFit$bestTune)
k_n
knnPredict <- predict(knnFit,newdata = wbcd_test)
confusionMatrix(knnPredict, wbcd_test$diagnosis)
is.vector(knnPredict)
is.vector(wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
knnROC <- prediction(as.numeric(knnPredict), as.numeric(answer))
prf <- performance(knnROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(knnROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
KNNFIT <- train(Class~. ,
data = wbcd_train,
method = "knn",
tuneGrid = grid)
KNNFIT <- train(Class~. ,
data = wbco_train,
method = "knn",
tuneGrid = grid)
KNNFIT
k_n <- max(KNNFIT$bestTune)
k_n
KNNPREDICT <- predict(KNNFIT,newdata = wbco_test)
confusionMatrix(KNNPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
KNNROC <- prediction(as.numeric(KNNPREDICT), as.numeric(ANSWER))
PRF <- performance(KNNROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(KNNROC,measure = "auc")
unlist(PERF.AUC@y.values)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
svm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "svmRadial",
tuneGrid = data.frame(.C = 0.25, .sigma = .0464))
svm_model
svmPredict <- predict(svm_model,newdata = wbcd_test)
confusionMatrix(svmPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
svmROC <- prediction(as.numeric(svmPredict), as.numeric(answer))
prf <- performance(svmROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(svmROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
SVM_MODEL <- train(Class~. ,
data = wbcd_train,
method = "svmRadial",
tuneGrid = data.frame(.C = 0.25, .sigma = 0.755))
SVM_MODEL <- train(Class~. ,
data = wbco_train,
method = "svmRadial",
tuneGrid = data.frame(.C = 0.25, .sigma = 0.755))
set.seed(1234)
SVM_MODEL <- train(Class~. ,
data = wbco_train,
method = "svmRadial",
tuneGrid = data.frame(.C = 0.25, .sigma = 0.755))
SVM_MODEL
SVMPREDICT <- predict(SVM_MODEL,newdata = wbco_test)
confusionMatrix(SVMPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
SVMROC <- prediction(as.numeric(SVMPREDICT), as.numeric(ANSWER))
PRF <- performance(SVMROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(SVMROC,measure = "auc")
unlist(PERF.AUC@y.values)
install.packages("rpart.plot")
library(caret)
library(lattice)
library(ggplot2)
library(xlsx)
library(e1071)
library(ROCR)
library(rpart.plot)
wdbc <- read.xlsx("WDBC.xlsx",1)
install.packages("rpart.plot")
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
dt_model <- train(diagnosis~. ,
data = wbcd_train,
method = "rpart")
dtPredict <- predict(dt_model,newdata = wbcd_test)
confusionMatrix(dtPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
dtROC <- prediction(as.numeric(dtPredict), as.numeric(answer))
prf <- performance(dtROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(dtROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
DT_MODEL <- train(Class~. ,
data = wbco_train,
method = "rpart")
DT_MODEL
DTPREDICT <- predict(DT_MODEL,newdata = wbco_test)
confusionMatrix(DTPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
DTROC <- prediction(as.numeric(DTPREDICT), as.numeric(ANSWER))
PRF <- performance(DTROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(DTROC,measure = "auc")
unlist(PERF.AUC@y.values)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
lda_model <- train(diagnosis~. ,
data = wbcd_train,
method = "lda",)
lda_model <- train(diagnosis~. ,
data = wbcd_train,
method = "lda")
ldaPredict <- predict(lda_model,newdata = wbcd_test)
confusionMatrix(ldaPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
ldaROC <- prediction(as.numeric(ldaPredict), as.numeric(answer))
prf <- performance(ldaROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(ldaROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
LDA_MODEL <- train(Class~. ,
data = wbco_train,
method = "lda")
LDA_MODEL
LDAPREDICT <- predict(LDA_MODEL,newdata = wbco_test)
confusionMatrix(LDAPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
LDAROC <- prediction(as.numeric(LDAPREDICT), as.numeric(ANSWER))
PRF <- performance(LDAROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(LDAROC,measure = "auc")
unlist(PERF.AUC@y.values)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm")
glmPredict <- predict(glm_model,newdata = wbcd_test)
confusionMatrix(glmPredict, wbcd_test$diagnosis)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
wbcd_n <- wbcd
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
glm_model <- train(diagnosis~. ,
data = wbcd_train,
method = "glm")
glmPredict <- predict(glm_model,newdata = wbcd_test)
confusionMatrix(glmPredict, wbcd_test$diagnosis)
answer <- wbcd_test$diagnosis
glmROC <- prediction(as.numeric(glmPredict), as.numeric(answer))
prf <- performance(glmROC,"tpr","fpr")
plot(prf)+abline(a=0,b=1,lwd=1,lty=2)
perf.auc <- performance(glmROC,measure = "auc")
unlist(perf.auc@y.values)
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
set.seed(1234)
GLM_MODEL <- train(Class~. ,
data = wbco_train,
method = "glm")
GLM_MODEL
GLMPREDICT <- predict(GLM_MODEL,newdata = wbco_test)
confusionMatrix(GLMPREDICT, wbco_test$Class)
ANSWER <- wbco_test$Class
GLMROC <- prediction(as.numeric(GLMPREDICT), as.numeric(ANSWER))
PRF <- performance(GLMROC,"tpr","fpr")
plot(PRF)+abline(a=0,b=1,lwd=1,lty=2)
PERF.AUC <- performance(GLMROC,measure = "auc")
unlist(PERF.AUC@y.values)
?h2o
h2o
library(h20)
install.package("h20")
install.package("h2o")
# H2O가 의존하는 라이브러리들 설치
if(!("methods" %in% rownames(installed.packages()))){install.packages("methods") }
install.packages("h2o")
library(h2o)
??h2o
h20.init
h2o.init(nthreads = 3, max_mem_size = "8g")
wbcd <- wdbc[-1]
wbcd_h2o <- as.h2o(wbcd, destination_frame = "wbcd_h2o")
h20.ls()
h2o.ls()
View(wobc)
View(wbcd_h2o)
View(wbcd_h2o)
head(wbcd_h2o)
View(wbcd_h2o)
wdbc <- read.xlsx("WDBC.xlsx",1)
wbcd <- wdbc[-1]
h2o.ls()
h2o.ls()
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
head(wbcd_h2o)
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
wbcd_n <- wbcd
train_num<-round(0.7*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
View(wbcd_test)
wbcd_train_h2o <- as.h2o(wbcd_train, "wbcd_train_h2o")
wbcd_train_h2o <- as.h2o(wbcd_train, "wbcd_train_h2o")
wbcd_test_h2o <- as.h2o(wbcd_test, "wbcd_test_h2o")
wobc <- read.xlsx("WOBC.xlsx",1)
str(wobc)
wbco <- wobc[-1]
wbco <- wbco[-1]
table(wbco$Class)
table(is.na(wbco))
wbco$Class <- factor(wbco$Class, levels =c(2,4),labels = c("Benign","Maliganant"))
round(prop.table(table(wbco$Class))* 100, digits=1)
wbco_n <- wbco
train_num<-round(0.7*nrow(wbco_n),0)
wbco_train<-wbco_n[1:train_num,]
wbco_test<-wbco_n[(train_num+1):nrow(wbco_n),]
wbco_train_h2o <- as.h2o(wbco_train, "wbco_train_h2o")
wbco_test_h2o <- as.h2o(wbco_test, "wbco_test_h2o")
