install.packages("RCurl")
# load the library
library(RCurl)
# specify the URL for the Iris data CSV
urlfile <-'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
# download the file
downloaded <- getURL(urlfile, ssl.verifypeer=FALSE)
# download the file
downloaded <- getURL(urlfile, ssl.verifypeer=FALSE)
# load the library
library(RCurl)
# specify the URL for the Iris data CSV
urlfile <-'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
# download the file
downloaded <- getURL(urlfile, ssl.verifypeer=FALSE)
#URL에서 데이터를 받아오는 패키지
install.packages("RCurl")
install.packages("RCurl")
# load the library
library(RCurl)
# specify the URL for the Iris data CSV
urlfile <-'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
# download the file
downloaded <- getURL(urlfile, ssl.verifypeer=FALSE)
# specify the URL for the Iris data CSV
urlfile <-'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
# download the file
downloaded <- getURL(urlfile, ssl.verifypeer=FALSE)
# download the file
downloaded <- getURL(urlfile)
#URL에서 데이터를 받아오는 패키지
install.packages("readr")
# load the library
library(readr)
# specify the URL for the Iris data CSV
urlfile <-'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
df <- read.table(urlfile)
dplyr::glimpse(df)
df
View(df)
WDBC <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"), header=FALSE)
WDBC <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"), header=FALSE)
View(WDBC)
WOBC <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"), header=FALSE)
View(WOBC)
colnames(WOBC)<-
c("id","Clump_Thickness","Uniformity_of_Cell Size","Uniformity_of_Cell Shape","Marginal_Adhesion","Single_Epithelial_Cell_Size","Bare_Nuclei","Bland_Chromatin","Normal_Nucleoli","Mitoses","Class")
head(WOBC)
colnames(WOBC)<-
c("id","Clump_Thickness","Uniformity_of_Cell_Size","Uniformity_of_Cell_Shape","Marginal_Adhesion","Single_Epithelial_Cell_Size","Bare_Nuclei","Bland_Chromatin","Normal_Nucleoli","Mitoses","Class")
head(WOBC)
View(WDBC)
View(WDBC)
WDBC_DOWN <- read.csv(data.csv)
WDBC_DOWN <- read.csv('data.csv')
View(WDBC)
View(WDBC_DOWN)
View(WDBC_DOWN)
View(WOBC)
write.csv(WOBC,file="WOBC_DATA.csv")
write.xlsx(WOBC,file="WOBC_DATA.xlsx")
write.xlsx(WOBC,file="New_version_breast_cancer.xlsx")
library(xlsx)
library(xlsx)
write.xlsx(WOBC,file="New_version_breast_cancer.xlsx")
write.xlsx(WOBC,file="WOBC_DATA.xlsx")
install.packages("carct")
install.packages("caret")
library(caret)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library(caret)
library(xlsx)
wdbc <- read.xlsx("WDBC.xlsx",1)
View(wdbc)
str(wdbc)
View(wdbc)
head(str(wdbc))
str(wdbc)
wdbc <- wdbc[-1]
table(wdbc$diagnosis)
wdbc <- read.xlsx("WDBC.xlsx",1)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
View(wbcd)
round(prop.table(wbcd$diagnosis))* 100,digits=1)
round(prop.table(wbcd$diagnosis))* 100, digits=1)
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
View(wbcd_n)
summary(wbcd_n$area_mean)
# repeats가 높아지면 어떠한 max(k)에 수렴함
repeats = 10
numbers = 10
# "데이터가 부정확, 불완전 또는 불합리한가 어떤가를 확인하기 위해서 사용되는 처리"
set.seed(1234)
x = trainControl(method = "repeatedcv",
# numbers만큼 쪼개겠다. 1개를 validation, 나머지 train 반복
number = numbers,
# number 한바퀴가 repeat = 1
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
repeats = 10
numbers = 10
tunel = 10
repeats = 10
numbers = 10
tunel = 10
set.seed(1234)
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
View(wbcd_train)
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
View(wbcd_train)
View(wbcd_n)
wbcd_n <- cbind(wbcd2[1], wbcd_n)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
library(e1071)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
```{r}
library(caret)
library(lattice)
library(ggplot2)
library(xlsx)
library(e1071)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
repeats = 10
numbers = 10
tunel = 10
set.seed(1234)
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. , data = wbcd_train, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
k_n <- max(model1$bestTune)
model1
model1 <- train(diagnosis~. , data = wbcd_n, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
model1 <- train(diagnosis~. , data = wbcd_n, method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "ROC",
tuneLength = tunel)
k_n <- max(model1$bestTune)
model1
x = trainControl(method = "repeatedcv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "Accuracy",
tuneLength = tunel)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "Accuracy",
tuneLength = tunel)
x = trainControl(method = "cv",
number = numbers,
repeats = repeats,
classProbs = TRUE,
summaryFunction = twoClassSummary)
x = trainControl(method = "cv",
number = numbers,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = x,
metric = "Accuracy",
tuneLength = tunel)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy")
model1 <- train(diagnosis~. ,
data = wbcd_n,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trainControl  = trControl,
metric     = "Accuracy")
model1 <- train(diagnosis~. ,
data = wbcd_n,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trainControl,
metric     = "Accuracy")
model1 <- train(diagnosis~. ,
data = wbcd_n,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trainControl,
metric     = "Accuracy")
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
tuneGrid = expand.grid(k = 1:10),
trControl = trainControl,
metric = "Accuracy")
ctrl = trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
tuneLength = 20)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
tuneLength = 20)
model1 <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
tuneLength = 20)
k_n <- max(model1$bestTune)
k_n <- max(model1$bestTune)
model1
ctrl = trainControl(method = "repeatedcv",
repeats = 3)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
tuneLength = 10)
k_n <- max(model1$bestTune)
model1
library(caret)
library(lattice)
library(ggplot2)
library(xlsx)
library(e1071)
wdbc <- read.xlsx("WDBC.xlsx",1)
str(wdbc)
wbcd <- wdbc[-1]
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels =c("B","M"),labels = c("Benign","Maliganant"))
round(prop.table(table(wbcd$diagnosis))* 100, digits=1)
summary(wbcd[c("radius_mean","area_mean","smoothness_mean")])
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n$area_mean)
wbcd_n <- cbind(wbcd[1], wbcd_n)
set.seed(1234)
ctrl = trainControl(method = "repeatedcv",
repeats = 3)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
tuneLength = 10)
k_n <- max(model1$bestTune)
model1
train_num<-round(0.9*nrow(bc_n),0)
bc_train<-bc_n[1:train_num,]
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
knnFit <- train(diagnosis~. ,
data = wbcd_train,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl,
verbose = F)
knnFit <- train(diagnosis~. ,
data = wbcd_train,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
k_n <- max(model1$bestTune)
knnFit
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
knnFit
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
set.seed(1234)
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
knnFit
ctrl = trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
knnFit
ctrl = trainControl(method = "repeatedcv",
number = 5,
repeats = 10)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
knnFit
ctrl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
knnFit <- train(diagnosis~. ,
data = wbcd_n,
method = "knn",
preProcess = c("center","scale"),
trControl = ctrl)
knnFit
